#!rsc by RouterOS
# RouterOS script: mv_fSMP
# Copyright (c) 2023-2024 Sertik (Sergej Serkov) <mikrovoice@bk.ru>
# https://github.com/Sertik13/MikroVoice/blob/main/LICENSE
#
# The ROS version is required to be at least version 6.43
#
# playback function for Catalex YX5300/6300 mp3 player
#

# usage:

# $fSMP list - put list $fSMP commands in terminal
# $fSMP play - start playing
# $fSMP pause
# $fSMP stop
# $fSMP next - play next track
# $fSMP previous - play previous track
# $fSMP volumeUP - increase volume on 1 pt
# $fSMP volumeDW - decrease volume on 1 pt
# $fSMP sleep - sleep mp3-module
# $fSMP wakeup - wakeup mp3-module
# $fSMP reset  
# $fSMP shuffle - set random playing
# $fSMP playfile YY XXX - play file XXX from YY folder
# $fSMP volume NN - set volume NN (0-30)
# $fSMP playcycle - set cycle play
# $fSMP playfolder YY - play all files in folder YY
# $fSMP TF - select TF-card


:global fSMP do={
  
# ----------------------------------------
:local ModuleType "Catalex"
:local portTypeSerial "serial"
:local portTypeUSB "usb"
#-----------------------------------------
:global serialModuleType $ModuleType
:local portUSB;
:local portSerial
:local BaudRate 9600
:local DataBits 8
:local Parity none
:local StopBits 1
:local FlowControl none
:local PppclientName $ModuleType
:local YX5300cmdPrefix "\7E\FF\06"
:local YX5300cmdPostfix "\11\11\11\EF"

:do {/interface ppp-client remove [/interface ppp-client find name=$PppclientName]} on-error={}

:global SMPport
:local NewPort
:local NowPort $SMPport; # сохранить текущий порт

    :foreach portId in=[/port find name~$portTypeUSB !inactive] do={:set portUSB ([/port get $portId]->"name")}
    :foreach portId in=[/port find name~$portTypeSerial used-by="" !inactive] do={:set portSerial ([/port get $portId]->"name")}
  
    :set NewPort $portUSB
               :if ([:len $NewPort]=0) do={:set NewPort $portSerial}

    :if (([:len $NewPort]=0) or ([:len [/port find name=$NewPort]]=0)) do={:return "Error: Not find port for Catalex module, port inactive or busy. Please, check /port"}


   :if (($NowPort!=$NewPort) and ([/port find name=$NowPort and inactive=yes])) do={:set SMPport $NewPort} else={:set SMPport $NowPort}
   :if ([:len $SMPport]=0) do={:set $SMPport $NewPort}
  
   :local gpio
   :do {:set gpio [/system routerboard settings get gpio]} on-error={}

  :local consoleFlagOff false
        if ([:len [/system console find port=$SMPport and !disabled]]>0) do={
                :set consoleFlagOff true
                /system console set [/system console find port=$SMPport] disable=yes
        }

   :if (($SMPport~$portTypeSerial) and ([:len $gpio]=0)) do={
      :put "";
      :put "ERROR: not set GPIO-pins to $SMPport port."
      :put "execute commands: /system routerboard settings set gpio=$SMPport"
      :put "                  /system reboot"
      :return "Error not set gpio serial. Function $0 d`not work"
   }

    do {
             /port set [/port find name=$SMPport] baud-rate=$BaudRate data-bits=$DataBits parity=$Parity stop-bits=$StopBits flow-control=$FlowControl
          } on-error={:return "Error set port $SMPport. Function $0 d`not work"}


# function $fByteToEscapeChar
# Chupakabra`s JSON parser for Mikrotik
# https://github.com/Winand/mikrotik-json-parser

   :local fBy do={
         :set $1 [:tonum $1]
    :return [[:parse "(\"\\$[:pick "0123456789ABCDEF" (($1 >> 4) & 0xF)]$[:pick "0123456789ABCDEF" ($1 & 0xF)]\")"]]
  }

:local ArrayComSMP {
   "play"="\0D"
   "pause"="\0E"
   "stop"="\16"
   "next"="\01"
   "previous"="\02"
   "volumeUP"="\04"
   "volumeDW"="\05"
   "sleep"="\0A"
   "wakeup"="\0B"
   "reset"="\0C"
   "shuffle"="\18"
   "playfile"="\0F\11"
   "volume"="\06\11"
   "playcycle"="\08\11"
   "playfolder"="\17\11"
   "TF"="09\11"}

#----------------------------------------------------------------------------
# main function`s code
# ---------------------------------------------------------------------------

:if ([:len $1]=0) do={:return "Error: no set name command"}

   :if ($1="list") do={
      :local ArrayComSMPlist
      :log info ""; :put ""; :log warning "<---- List commands Serial MP3/Wav Catalex YX5300/6300 Player: ---->"
          :foreach k,v in=$ArrayComSMP do={:log info $k; :put $k; :set ArrayComSMPlist ($ArrayComSMPlist, $k)}
      :log info ""; :put "";
  :return $ArrayComSMPlist}

   :if ($1="mp3type") do={:return $ModuleType}

   :local cmd ($ArrayComSMP->$1)
    :if ([:len $cmd]=0) do={:return "Error: bad command"}
               :put "Execute command Serial MP3 Player: $1 $2 $3"
               :log warning "Execute command Serial MP3 Player: $1 $2 $3"

     :if ($1="TF") do={:set $2 02}

     :local a1 $2; :local b1 $3
     :if ([:len $3]=0) do={:set b1 $2; :set a1 "\11"}
     :if ($a1!="\11") do={:set a1 [$fBy $a1]}
     :set b1 [$fBy $b1]

      :if ([:len $cmd]>1) do={:set YX5300cmdPostfix ("$a1"."$b1"."\EF")}

:foreach portId in=[/port find name=$SMPport and used-by="PPP <$PppclientName>"] do={
  :foreach i in=[/interface ppp-client find name=$PppclientName] do={/interface ppp-client remove $i}
 }

     /interface ppp-client add name=$PppclientName dial-on-demand=no port=$SMPport modem-init=("$YX5300cmdPrefix"."$cmd"."$YX5300cmdPostfix") null-modem=yes disabled=no
     :delay 1s
     /interface ppp-client remove [/interface ppp-client find name=$PppclientName]

   :if ($consoleFlagOff) do={
   :do {/system console set [/system console find port=$SMPport] disable=no} on-error={}
     }
   :return OK
}
